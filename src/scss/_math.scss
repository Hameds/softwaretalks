@forward "sass:math";

@use "sass:meta";
@use "sass:map";

/// Remove the unit of a value
///
/// @group Math
/// @author Mohammad Hasani
///
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($value) {
  @if meta.type-of($value) != 'number' {
    @warn "You tried to remove unit from a non-number value (#{meta.type-of($value)})";
    @return $value;
  }

  @return $value / ($value * 0 + 1);
}

$_ratios: (
  phi: 1.61803398875,
);

/// Ratio helper function as a specific wrap arround map-get for $_ratios map
///
/// @group Math
/// @author Mohammad Hasani
///
/// @parameter {String} $key - A key of $_ratios map
/// @return {Number} A ratio based on $_ratios map
@function ratio($key) {
  @if map.has-key($_ratios, $key) {
    @return map.get($_ratios, $key);
  }

  @error "Unknown key '#{$key}' in $_ratios map.";
}

/// Ease helper function as a specific wrap arround map-get for $_eases map
///
/// @group Math
/// @author Mohammad Hasani
///
/// @parameter {String} $key - A key of $_eases map
/// @return {Number} A ratio based on $_eases map
$_eases: (
  default: cubic-bezier(0.25, 0.1, 0.25, 1),
);

@function ease($key: default) {
  @if map.has-key($_eases, $key) {
    @return map.get($_eases, $key);
  }

  @error "Unknown key '#{$key}' in $_eases map.";
}

/// Remove the unit of a length
///
/// @group Math
/// @author Mohammad Hasani
/// @link https://css-tricks.com/snippets/sass/strip-unit-function/
///
/// @parameter {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}
